name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      # Set FAIL_FAST to 1 to restore immediate failure behavior easily.
      FAIL_FAST: 0
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            setup.py
            pyproject.toml
            external/torchani/setup.py
            external/torchani/pyproject.toml
      - name: Cache virtualenv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('pyproject.toml', 'requirements.txt', 'setup.py', 'external/torchani/setup.py', 'external/torchani/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
      - name: Cache torch & pip wheels (extras)
        id: cache-torch
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/torch
          key: piptorch-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('pyproject.toml', 'requirements.txt', 'setup.py', 'external/torchani/setup.py', 'external/torchani/pyproject.toml') }}
          restore-keys: |
            piptorch-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-
      - name: Show cache key context
        run: |
          echo "Using pip cache based on requirements.txt, setup.py, pyproject.toml"
          echo "Venv cache hit: ${{ steps.cache-venv.outputs.cache-hit }}"
          echo "Torch/pip cache hit: ${{ steps.cache-torch.outputs.cache-hit }}"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Create venv if not present (cache may have restored it already)
          if [ ! -d .venv ]; then
            python -m venv .venv
          fi
          echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH
          . .venv/bin/activate
          pip install --upgrade pip wheel
          # Install TorchANI from vendored source first
          pip install -e external/torchani
          # Install project with dev & chem extras
          pip install -e .[dev,chem]
          # Show key dependency versions (concise)
          python -c "import torch, torchani; print('torch', torch.__version__, 'torchani', torchani.__version__)"
      - name: Verify environment
        run: |
          . .venv/bin/activate
          python -V
          python -c "import torch, torchani, pathlib; print('torch', torch.__version__, 'torchani', torchani.__version__); print('torchani file:', torchani.__file__); p=pathlib.Path(torchani.__file__).with_name('tuples.py'); print('tuples.py exists:', p.exists()); from torchani.tuples import SpeciesCoordinates; print('SpeciesCoordinates import OK')"
          pip list | grep -E 'torch|torchani|ruff' || true
      - name: Lint
        id: lint
        continue-on-error: true
        run: |
          . .venv/bin/activate
          set +e
          ruff check luke tests
          rc=$?
          if [ $rc -ne 0 ]; then echo "LINT_FAILED=1" >> $GITHUB_ENV; fi
          if [ "$FAIL_FAST" = "1" ] && [ $rc -ne 0 ]; then exit $rc; fi
      - name: Type check (mypy)
        id: mypy
        continue-on-error: true
        run: |
          . .venv/bin/activate
          set +e
          mypy luke
          rc=$?
          if [ $rc -ne 0 ]; then echo "MYPY_FAILED=1" >> $GITHUB_ENV; fi
          if [ "$FAIL_FAST" = "1" ] && [ $rc -ne 0 ]; then exit $rc; fi
      - name: Test (LUKE only)
        id: tests
        continue-on-error: true
        run: |
          . .venv/bin/activate
          set +e
          pytest --disable-warnings --cov=luke --cov-report=xml:coverage.xml
          rc=$?
          if [ $rc -ne 0 ]; then echo "TEST_FAILED=1" >> $GITHUB_ENV; fi
          if [ "$FAIL_FAST" = "1" ] && [ $rc -ne 0 ]; then exit $rc; fi
          # Basic coverage summary
          if [ -f coverage.xml ]; then
            lines_total=$(grep -o 'lines-covered="[0-9]\+" lines-valid="[0-9]\+"' coverage.xml | sed -E 's/.*lines-covered="([0-9]+)" lines-valid="([0-9]+)".*/\1 \2/' | awk '{if ($2>0) printf "%.1f", ($1*100)/$2; else print 0}')
            echo "COVERAGE_PERCENT=$lines_total" >> $GITHUB_ENV
          fi
      - name: Build (sdist/wheel) smoke
        id: build
        continue-on-error: true
        run: |
          . .venv/bin/activate
          set +e
          pip install build
          python -m build --sdist --wheel --outdir dist
          rc=$?
          if [ $rc -ne 0 ]; then echo "BUILD_FAILED=1" >> $GITHUB_ENV; fi
          if [ "$FAIL_FAST" = "1" ] && [ $rc -ne 0 ]; then exit $rc; fi
      - name: Twine check
        id: twine
        continue-on-error: true
        run: |
          . .venv/bin/activate
          set +e
          pip install twine
          twine check dist/*
          rc=$?
          if [ $rc -ne 0 ]; then echo "TWINE_FAILED=1" >> $GITHUB_ENV; fi
          if [ "$FAIL_FAST" = "1" ] && [ $rc -ne 0 ]; then exit $rc; fi
      - name: Aggregate & fail if any step failed
        if: always()
        run: |
          fails=0
          summary="## CI Summary\n"
          for flag in LINT_FAILED MYPY_FAILED TEST_FAILED BUILD_FAILED TWINE_FAILED; do
            val=$(printenv $flag || echo 0)
            if [ "$val" = "1" ]; then
              summary+="- ❌ ${flag}\n"
              fails=1
            else
              summary+="- ✅ ${flag}\n"
            fi
          done
          if [ -n "${COVERAGE_PERCENT}" ]; then
            summary+="\nCoverage: ${COVERAGE_PERCENT}%\n"
          fi
          echo "$summary" >> $GITHUB_STEP_SUMMARY
          if [ $fails -ne 0 ]; then
            echo "One or more steps failed." >&2
            exit 1
          fi